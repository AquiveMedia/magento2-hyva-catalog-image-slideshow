<?php

declare(strict_types=1);

use AquiveMedia\CatalogImageSlideshow\Block\Product\Image;
use Magento\Framework\Escaper;

/** @var Image $block */
/** @var Escaper $escaper */

$hasLoadingAttribute = ($block->getCustomAttributes() ?: [])['loading'] ?? false;

$galleryUrls = $block->getGalleryUrls();
$galleryCount = $galleryUrls ? count($galleryUrls) : 0;
?>

<?php if ($galleryCount > 1): ?>
    <div class="slideshow-container relative group block"
         x-data="productSlideshow()"
         x-init="init(<?= $escaper->escapeHtmlAttr(json_encode($galleryUrls)) ?>)"
         x-intersect.once="preloadImages"
         @mouseenter="showIndicators = true"
         @mouseleave="current = 0; showIndicators = false">

        <img :src="images.length > 0 ? images[current] : '<?= $escaper->escapeUrl($block->getImageUrl()) ?>'"
             class="hover:shadow-sm object-contain <?= $escaper->escapeHtmlAttr($block->getClass()) ?>"
             @update-gallery-<?= (int)$block->getProductId() ?>.window="$root.src = $event.detail"
             :alt="`Image ${current + 1} of ${images.length}`"
        <?php foreach ($block->getCustomAttributes() as $name => $value): ?>
            <?= $escaper->escapeHtmlAttr($name) ?>="<?= $escaper->escapeHtmlAttr($value) ?>"
        <?php endforeach; ?>
        <?php if (! $hasLoadingAttribute): ?>
            loading="lazy"
        <?php endif; ?>
            width="<?= $escaper->escapeHtmlAttr($block->getWidth()) ?>"
            height="<?= $escaper->escapeHtmlAttr($block->getHeight()) ?>"
            alt="<?= $escaper->escapeHtmlAttr($block->getLabel()) ?>"
            title="<?= $escaper->escapeHtmlAttr($block->getLabel()) ?>"
        />

        <div x-show="images.length > 1" class="absolute inset-0 flex">
            <template x-for="index in images.length" :key="index">
                <div class="flex-1 cursor-pointer"
                     @mouseenter="current = index - 1"
                     :title="`Image ${index}`"></div>
            </template>
        </div>

        <div x-show="images.length > 1 && showIndicators"
             class="absolute bottom-2 left-0 right-0 flex justify-center gap-2 z-50">
            <template x-for="index in images.length" :key="index">
                <span :class="current === (index - 1) ? 'bg-gray-600' : 'bg-gray-300'"
                      class="w-3 h-3 rounded-full border-white border"></span>
            </template>
        </div>

    </div>
<?php else: ?>
    <img class="hover:shadow-sm object-contain <?= $escaper->escapeHtmlAttr($block->getClass()) ?>"
         x-data=""
         @update-gallery-<?= (int)$block->getProductId() ?>.window="$root.src = $event.detail"
    <?php foreach ($block->getCustomAttributes() as $name => $value): ?>
        <?= $escaper->escapeHtmlAttr($name) ?>="<?= $escaper->escapeHtmlAttr($value) ?>"
    <?php endforeach; ?>
        src="<?= $escaper->escapeUrl($block->getImageUrl()) ?>"
    <?php if (! $hasLoadingAttribute): ?>
        loading="lazy"
    <?php endif; ?>
        width="<?= $escaper->escapeHtmlAttr($block->getWidth()) ?>"
        height="<?= $escaper->escapeHtmlAttr($block->getHeight()) ?>"
        alt="<?= $escaper->escapeHtmlAttr($block->getLabel()) ?>"
        title="<?= $escaper->escapeHtmlAttr($block->getLabel()) ?>"
        />
<?php endif; ?>

<script>
document.addEventListener('alpine:init', () => {
    Alpine.data('productSlideshow', () => ({
        current: 0,
        images: [],
        showIndicators: false,

        init(imageUrls) {
            this.preloadImages(Array.isArray(imageUrls) ? imageUrls : []);
        },

        preloadImages(urls) {
            if (urls.length === 0) return;

            // Create a promise for each image preload
            const preloadPromises = urls.map((url) => {
                return new Promise((resolve) => {
                    const img = new Image();
                    img.onload = () => resolve(url);
                    img.onerror = () => resolve(url);
                    img.src = url;
                });
            });

            // Wait for all images to load, then set them for slideshow
            Promise.all(preloadPromises).then(() => {
                this.images = urls;
            });
        }
    }));
});
</script>